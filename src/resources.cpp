#include <gio/gio.h>

#if defined (__ELF__) && ( __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 6))
# define SECTION __attribute__ ((section (".gresource.g"), aligned (8)))
#else
# define SECTION
#endif

#ifdef _MSC_VER
static const SECTION union { const guint8 data[1373]; const double alignment; void * const ptr;}  g_resource_data = { {
  0107, 0126, 0141, 0162, 0151, 0141, 0156, 0164, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 
  0030, 0000, 0000, 0000, 0164, 0000, 0000, 0000, 0000, 0000, 0000, 0050, 0003, 0000, 0000, 0000, 
  0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0002, 0000, 0000, 0000, 0325, 0121, 0135, 0056, 
  0002, 0000, 0000, 0000, 0164, 0000, 0000, 0000, 0006, 0000, 0114, 0000, 0174, 0000, 0000, 0000, 
  0200, 0000, 0000, 0000, 0314, 0202, 0312, 0362, 0000, 0000, 0000, 0000, 0200, 0000, 0000, 0000, 
  0027, 0000, 0166, 0000, 0230, 0000, 0000, 0000, 0124, 0005, 0000, 0000, 0324, 0265, 0002, 0000, 
  0377, 0377, 0377, 0377, 0124, 0005, 0000, 0000, 0001, 0000, 0114, 0000, 0130, 0005, 0000, 0000, 
  0134, 0005, 0000, 0000, 0156, 0157, 0153, 0151, 0141, 0057, 0000, 0000, 0001, 0000, 0000, 0000, 
  0151, 0143, 0157, 0156, 0163, 0070, 0055, 0143, 0151, 0162, 0143, 0154, 0145, 0144, 0055, 0156, 
  0055, 0065, 0060, 0056, 0160, 0156, 0147, 0000, 0254, 0004, 0000, 0000, 0000, 0000, 0000, 0000, 
  0211, 0120, 0116, 0107, 0015, 0012, 0032, 0012, 0000, 0000, 0000, 0015, 0111, 0110, 0104, 0122, 
  0000, 0000, 0000, 0062, 0000, 0000, 0000, 0062, 0010, 0006, 0000, 0000, 0000, 0036, 0077, 0210, 
  0261, 0000, 0000, 0000, 0006, 0142, 0113, 0107, 0104, 0000, 0377, 0000, 0377, 0000, 0377, 0240, 
  0275, 0247, 0223, 0000, 0000, 0004, 0141, 0111, 0104, 0101, 0124, 0150, 0201, 0355, 0332, 0337, 
  0213, 0125, 0125, 0024, 0007, 0360, 0317, 0330, 0344, 0334, 0101, 0113, 0147, 0164, 0324, 0247, 
  0110, 0372, 0151, 0211, 0315, 0273, 0130, 0101, 0124, 0232, 0076, 0130, 0121, 0140, 0131, 0024, 
  0030, 0106, 0340, 0017, 0254, 0267, 0250, 0240, 0227, 0236, 0202, 0012, 0214, 0136, 0203, 0372, 
  0023, 0102, 0262, 0322, 0314, 0212, 0054, 0263, 0174, 0311, 0374, 0121, 0021, 0225, 0120, 0140, 
  0203, 0375, 0060, 0207, 0322, 0333, 0303, 0332, 0247, 0163, 0146, 0270, 0063, 0163, 0317, 0075, 
  0347, 0316, 0030, 0370, 0205, 0313, 0076, 0167, 0377, 0130, 0077, 0316, 0336, 0153, 0355, 0265, 
  0327, 0076, 0134, 0304, 0205, 0205, 0236, 0032, 0151, 0015, 0342, 0146, 0254, 0304, 0015, 0270, 
  0012, 0213, 0060, 0047, 0265, 0377, 0211, 0237, 0361, 0055, 0276, 0302, 0207, 0370, 0000, 0043, 
  0065, 0312, 0320, 0061, 0032, 0170, 0010, 0273, 0161, 0016, 0315, 0222, 0277, 0177, 0360, 0066, 
  0066, 0242, 0157, 0232, 0145, 0007, 0375, 0170, 0022, 0047, 0013, 0102, 0235, 0305, 0036, 0074, 
  0203, 0365, 0130, 0206, 0001, 0134, 0232, 0176, 0003, 0251, 0156, 0075, 0236, 0305, 0336, 0064, 
  0046, 0033, 0377, 0023, 0166, 0210, 0227, 0063, 0055, 0130, 0213, 0157, 0012, 0002, 0174, 0206, 
  0115, 0230, 0327, 0001, 0255, 0371, 0170, 0014, 0007, 0013, 0364, 0116, 0140, 0115, 0055, 0222, 
  0116, 0200, 0006, 0136, 0053, 0060, 0374, 0034, 0167, 0324, 0110, 0177, 0065, 0276, 0050, 0320, 
  0337, 0251, 0013, 0263, 0263, 0104, 0010, 0336, 0024, 0106, 0273, 0005, 0227, 0324, 0315, 0044, 
  0321, 0334, 0206, 0063, 0362, 0331, 0136, 0134, 0027, 0361, 0245, 0142, 0272, 0233, 0070, 0202, 
  0345, 0165, 0021, 0236, 0004, 0053, 0160, 0064, 0361, 0074, 0236, 0144, 0250, 0204, 0241, 0002, 
  0301, 0117, 0261, 0260, 0052, 0301, 0022, 0030, 0020, 0056, 0272, 0051, 0154, 0162, 0111, 0247, 
  0204, 0032, 0362, 0345, 0364, 0261, 0174, 0077, 0230, 0116, 0314, 0301, 0047, 0362, 0145, 0326, 
  0221, 0315, 0144, 0206, 0175, 0104, 0154, 0166, 0063, 0205, 0005, 0362, 0125, 0261, 0263, 0354, 
  0340, 0265, 0162, 0303, 0236, 0016, 0233, 0230, 0012, 0053, 0344, 0016, 0140, 0165, 0273, 0203, 
  0372, 0345, 0373, 0304, 0226, 0356, 0310, 0325, 0021, 0266, 0313, 0215, 0277, 0255, 0045, 0366, 
  0224, 0174, 0237, 0350, 0206, 0213, 0355, 0024, 0275, 0370, 0122, 0310, 0266, 0175, 0252, 0316, 
  0175, 0042, 0124, 0150, 0342, 0366, 0356, 0312, 0325, 0021, 0356, 0022, 0262, 0235, 0064, 0305, 
  0254, 0154, 0224, 0173, 0210, 0062, 0030, 0226, 0357, 0310, 0033, 0332, 0350, 0337, 0137, 0350, 
  0077, 0134, 0202, 0117, 0217, 0334, 0223, 0076, 0060, 0131, 0307, 0167, 0122, 0247, 0115, 0045, 
  0210, 0063, 0126, 0221, 0021, 0134, 0061, 0105, 0377, 0116, 0025, 0201, 0315, 0151, 0334, 0256, 
  0211, 0072, 0014, 0212, 0260, 0372, 0254, 0362, 0001, 0140, 0121, 0221, 0046, 0336, 0305, 0254, 
  0111, 0372, 0127, 0121, 0144, 0000, 0243, 0370, 0273, 0050, 0147, 0221, 0331, 0055, 0302, 0270, 
  0077, 0302, 0351, 0222, 0304, 0307, 0343, 0066, 0154, 0255, 0110, 0143, 0042, 0214, 0210, 0115, 
  0262, 0127, 0034, 0344, 0060, 0126, 0221, 0225, 0251, 0174, 0277, 0042, 0243, 0347, 0122, 0371, 
  0002, 0156, 0254, 0110, 0153, 0042, 0354, 0115, 0345, 0252, 0254, 0242, 0250, 0310, 0262, 0124, 
  0036, 0256, 0310, 0344, 0105, 0274, 0047, 0274, 0312, 0033, 0230, 0135, 0221, 0136, 0053, 0144, 
  0062, 0136, 0237, 0125, 0024, 0025, 0271, 0046, 0225, 0307, 0053, 0062, 0071, 0217, 0107, 0305, 
  0022, 0030, 0306, 0363, 0025, 0351, 0265, 0302, 0261, 0124, 0136, 0333, 0252, 0361, 0224, 0060, 
  0276, 0116, 0342, 0252, 0242, 0261, 0367, 0247, 0272, 0173, 0323, 0377, 0163, 0270, 0165, 0134, 
  0377, 0052, 0306, 0116, 0104, 0341, 0115, 0374, 0322, 0252, 0161, 0064, 0065, 0166, 0262, 0024, 
  0132, 0051, 0002, 0157, 0246, 0272, 0357, 0160, 0171, 0241, 0276, 0252, 0042, 0175, 0362, 0074, 
  0001, 0046, 0167, 0221, 0165, 0340, 0011, 0174, 0217, 0053, 0361, 0162, 0067, 0031, 0025, 0025, 
  0371, 0043, 0225, 0163, 0153, 0244, 0177, 0132, 0244, 0213, 0316, 0341, 0021, 0334, 0127, 0023, 
  0335, 0154, 0166, 0177, 0313, 0052, 0212, 0212, 0234, 0112, 0145, 0155, 0147, 0344, 0204, 0375, 
  0170, 0051, 0075, 0277, 0252, 0302, 0111, 0257, 0200, 0105, 0251, 0374, 0065, 0253, 0050, 0052, 
  0222, 0171, 0253, 0226, 0236, 0240, 0042, 0236, 0026, 0056, 0163, 0041, 0136, 0127, 0075, 0303, 
  0171, 0135, 0052, 0063, 0357, 0065, 0106, 0221, 0043, 0251, 0274, 0251, 0042, 0223, 0126, 0030, 
  0025, 0113, 0154, 0124, 0244, 0220, 0036, 0257, 0110, 0157, 0105, 0052, 0277, 0156, 0325, 0270, 
  0136, 0170, 0202, 0075, 0035, 0020, 0236, 0310, 0153, 0215, 0307, 0016, 0143, 0143, 0262, 0116, 
  0275, 0326, 0276, 0064, 0166, 0135, 0253, 0306, 0001, 0171, 0320, 0070, 0277, 0044, 0341, 0166, 
  0025, 0231, 0045, 0166, 0375, 0052, 0212, 0014, 0312, 0203, 0306, 0377, 0134, 0172, 0161, 0151, 
  0215, 0044, 0046, 0175, 0352, 0363, 0056, 0343, 0161, 0036, 0017, 0053, 0030, 0151, 0007, 0270, 
  0137, 0354, 0165, 0273, 0025, 0274, 0326, 0170, 0074, 0050, 0336, 0322, 0301, 0222, 0304, 0333, 
  0235, 0221, 0014, 0033, 0164, 0066, 0043, 0075, 0070, 0244, 0215, 0003, 0134, 0037, 0176, 0114, 
  0035, 0357, 0054, 0301, 0140, 0272, 0260, 0116, 0310, 0366, 0203, 0066, 0256, 0041, 0062, 0203, 
  0074, 0344, 0302, 0113, 0076, 0034, 0026, 0262, 0265, 0165, 0326, 0151, 0310, 0163, 0275, 0333, 
  0272, 0047, 0127, 0151, 0144, 0057, 0370, 0250, 0022, 0227, 0102, 0153, 0322, 0240, 0063, 0162, 
  0237, 0075, 0223, 0030, 0306, 0137, 0102, 0246, 0322, 0127, 0031, 0073, 0345, 0157, 0140, 0101, 
  0275, 0162, 0225, 0302, 0220, 0210, 0072, 0232, 0170, 0245, 0023, 0002, 0015, 0221, 0026, 0152, 
  0212, 0063, 0362, 0114, 0044, 0261, 0347, 0342, 0100, 0222, 0341, 0200, 0012, 0367, 0214, 0103, 
  0042, 0014, 0310, 0256, 0025, 0206, 0352, 0220, 0256, 0115, 0014, 0212, 0104, 0110, 0166, 0035, 
  0127, 0071, 0230, 0135, 0052, 0237, 0332, 0243, 0272, 0023, 0213, 0215, 0307, 0160, 0201, 0347, 
  0061, 0161, 0236, 0251, 0005, 0213, 0345, 0313, 0354, 0214, 0310, 0275, 0366, 0326, 0105, 0274, 
  0200, 0136, 0341, 0235, 0062, 0303, 0076, 0040, 0017, 0331, 0153, 0103, 0103, 0356, 0000, 0232, 
  0042, 0241, 0134, 0327, 0355, 0153, 0217, 0270, 0312, 0310, 0366, 0211, 0314, 0260, 0273, 0172, 
  0367, 0276, 0132, 0076, 0355, 0131, 0326, 0176, 0263, 0010, 0072, 0313, 0142, 0120, 0204, 0364, 
  0131, 0330, 0221, 0055, 0245, 0072, 0157, 0213, 0047, 0105, 0103, 0054, 0257, 0054, 0234, 0151, 
  0212, 0210, 0164, 0237, 0110, 0320, 0335, 0055, 0222, 0163, 0013, 0104, 0200, 0067, 0073, 0075, 
  0057, 0307, 0075, 0251, 0317, 0076, 0171, 0302, 0043, 0013, 0073, 0266, 0232, 0241, 0057, 0040, 
  0372, 0104, 0126, 0174, 0227, 0070, 0002, 0224, 0371, 0174, 0243, 0051, 0102, 0361, 0267, 0104, 
  0000, 0130, 0111, 0201, 0072, 0077, 0252, 0231, 0047, 0162, 0261, 0253, 0104, 0326, 0362, 0152, 
  0341, 0256, 0057, 0113, 0355, 0277, 0213, 0074, 0324, 0011, 0341, 0322, 0367, 0213, 0131, 0231, 
  0060, 0024, 0277, 0210, 0377, 0063, 0376, 0005, 0156, 0371, 0101, 0156, 0304, 0055, 0006, 0064, 
  0000, 0000, 0000, 0000, 0111, 0105, 0116, 0104, 0256, 0102, 0140, 0202, 0000, 0000, 0050, 0165, 
  0165, 0141, 0171, 0051, 0057, 0000, 0000, 0000, 0000, 0000, 0000, 0000
} };
#else /* _MSC_VER */
static const SECTION union { const guint8 data[1373]; const double alignment; void * const ptr;}  g_resource_data = {
  "\107\126\141\162\151\141\156\164\000\000\000\000\000\000\000\000"
  "\030\000\000\000\164\000\000\000\000\000\000\050\003\000\000\000"
  "\000\000\000\000\000\000\000\000\002\000\000\000\325\121\135\056"
  "\002\000\000\000\164\000\000\000\006\000\114\000\174\000\000\000"
  "\200\000\000\000\314\202\312\362\000\000\000\000\200\000\000\000"
  "\027\000\166\000\230\000\000\000\124\005\000\000\324\265\002\000"
  "\377\377\377\377\124\005\000\000\001\000\114\000\130\005\000\000"
  "\134\005\000\000\156\157\153\151\141\057\000\000\001\000\000\000"
  "\151\143\157\156\163\070\055\143\151\162\143\154\145\144\055\156"
  "\055\065\060\056\160\156\147\000\254\004\000\000\000\000\000\000"
  "\211\120\116\107\015\012\032\012\000\000\000\015\111\110\104\122"
  "\000\000\000\062\000\000\000\062\010\006\000\000\000\036\077\210"
  "\261\000\000\000\006\142\113\107\104\000\377\000\377\000\377\240"
  "\275\247\223\000\000\004\141\111\104\101\124\150\201\355\332\337"
  "\213\125\125\024\007\360\317\330\344\334\101\113\147\164\324\247"
  "\110\372\151\211\315\273\130\101\124\232\076\130\121\140\131\024"
  "\030\106\340\017\254\267\250\240\227\236\202\012\214\136\203\372"
  "\023\102\262\322\314\212\054\263\174\311\374\121\021\225\120\140"
  "\203\375\060\207\322\333\303\332\247\163\146\270\063\163\317\075"
  "\347\316\030\370\205\313\076\167\377\130\077\316\336\153\355\265"
  "\327\076\134\304\205\205\236\032\151\015\342\146\254\304\015\270"
  "\012\213\060\047\265\377\211\237\361\055\276\302\207\370\000\043"
  "\065\312\320\061\032\170\010\273\161\016\315\222\277\177\360\066"
  "\066\242\157\232\145\007\375\170\022\047\013\102\235\305\036\074"
  "\203\365\130\206\001\134\232\176\003\251\156\075\236\305\336\064"
  "\046\033\377\023\166\210\227\063\055\130\213\157\012\002\174\206"
  "\115\230\327\001\255\371\170\014\007\013\364\116\140\115\055\222"
  "\116\200\006\136\053\060\374\034\167\324\110\177\065\276\050\320"
  "\337\251\013\263\263\104\010\336\024\106\273\005\227\324\315\044"
  "\321\334\206\063\362\331\136\134\027\361\245\142\272\233\070\202"
  "\345\165\021\236\004\053\160\064\361\074\236\144\250\204\241\002"
  "\301\117\261\260\052\301\022\030\020\056\272\051\154\162\111\247"
  "\204\032\362\345\364\261\174\077\230\116\314\301\047\362\145\326"
  "\221\315\144\206\175\104\154\166\063\205\005\362\125\261\263\354"
  "\340\265\162\303\236\016\233\230\012\053\344\016\140\165\273\203"
  "\372\345\373\304\226\356\310\325\021\266\313\215\277\255\045\366"
  "\224\174\237\350\206\213\355\024\275\370\122\310\266\175\252\316"
  "\175\042\124\150\342\366\356\312\325\021\356\022\262\235\064\305"
  "\254\154\224\173\210\062\030\226\357\310\033\332\350\337\137\350"
  "\077\134\202\117\217\334\223\076\060\131\307\167\122\247\115\045"
  "\210\063\126\221\021\134\061\105\377\116\025\201\315\151\334\256"
  "\211\072\014\212\260\372\254\362\001\140\121\221\046\336\305\254"
  "\111\372\127\121\144\000\243\370\273\050\147\221\331\055\302\270"
  "\077\302\351\222\304\307\343\066\154\255\110\143\042\214\210\115"
  "\262\127\034\344\060\126\221\225\251\174\277\042\243\347\122\371"
  "\002\156\254\110\153\042\354\115\345\252\254\242\250\310\262\124"
  "\036\256\310\344\105\274\047\274\312\033\230\135\221\136\053\144"
  "\062\136\237\125\024\025\271\046\225\307\053\062\071\217\107\305"
  "\022\030\306\363\025\351\265\302\261\124\136\333\252\361\224\060"
  "\276\116\342\252\242\261\367\247\272\173\323\377\163\270\165\134"
  "\377\052\306\116\104\341\115\374\322\252\161\064\065\166\262\024"
  "\132\051\002\157\246\272\357\160\171\241\276\252\042\175\362\074"
  "\001\046\167\221\165\340\011\174\217\053\361\162\067\031\025\025"
  "\371\043\225\163\153\244\177\132\244\213\316\341\021\334\127\023"
  "\335\154\166\177\313\052\212\212\234\112\145\155\147\344\204\375"
  "\170\051\075\277\252\302\111\257\200\105\251\374\065\253\050\052"
  "\222\171\253\226\236\240\042\236\026\056\163\041\136\127\075\303"
  "\171\135\052\063\357\065\106\221\043\251\274\251\042\223\126\030"
  "\025\113\154\124\244\220\036\257\110\157\105\052\277\156\325\270"
  "\136\170\202\075\035\020\236\310\153\215\307\016\143\143\262\116"
  "\275\326\276\064\166\135\253\306\001\171\320\070\277\044\341\166"
  "\025\231\045\166\375\052\212\014\312\203\306\377\134\172\161\151"
  "\215\044\046\175\352\363\056\343\161\036\017\053\030\151\007\270"
  "\137\354\165\273\025\274\326\170\074\050\336\322\301\222\304\333"
  "\235\221\014\033\164\066\043\075\070\244\215\003\134\037\176\114"
  "\035\357\054\301\140\272\260\116\310\366\203\066\256\041\062\203"
  "\074\344\302\113\076\034\026\262\265\165\326\151\310\163\275\333"
  "\272\047\127\151\144\057\370\250\022\227\102\153\322\240\063\162"
  "\237\075\223\030\306\137\102\246\322\127\031\073\345\157\140\101"
  "\275\162\225\302\220\210\072\232\170\245\023\002\015\221\026\152"
  "\212\063\362\114\044\261\347\342\100\222\341\200\012\367\214\103"
  "\042\014\310\256\025\206\352\220\256\115\014\212\104\110\166\035"
  "\127\071\230\135\052\237\332\243\272\023\213\215\307\160\201\347"
  "\061\161\236\251\005\213\345\313\354\214\310\275\366\326\105\274"
  "\200\136\341\235\062\303\076\040\017\331\153\103\103\356\000\232"
  "\042\241\134\327\355\153\217\270\312\310\366\211\314\260\273\172"
  "\367\276\132\076\355\131\326\176\263\010\072\313\142\120\204\364"
  "\131\330\221\055\245\072\157\213\047\105\103\054\257\054\234\151"
  "\212\210\164\237\110\320\335\055\222\163\013\104\200\067\073\075"
  "\057\307\075\251\317\076\171\302\043\013\073\266\232\241\057\040"
  "\372\104\126\174\227\070\002\224\371\174\243\051\102\361\267\104"
  "\000\130\111\201\072\077\252\231\047\162\261\253\104\326\362\152"
  "\341\256\057\113\355\277\213\074\324\011\341\322\367\213\131\231"
  "\060\024\277\210\377\063\376\005\156\371\101\156\304\055\006\064"
  "\000\000\000\000\111\105\116\104\256\102\140\202\000\000\050\165"
  "\165\141\171\051\057\000\000\000\000\000\000\000" };
#endif /* !_MSC_VER */

static GStaticResource static_resource = { g_resource_data.data, sizeof (g_resource_data.data) - 1 /* nul terminator */, NULL, NULL, NULL };
extern GResource *g_get_resource (void);
GResource *g_get_resource (void)
{
  return g_static_resource_get_resource (&static_resource);
}
/*
  If G_HAS_CONSTRUCTORS is true then the compiler support *both* constructors and
  destructors, in a usable way, including e.g. on library unload. If not you're on
  your own.

  Some compilers need #pragma to handle this, which does not work with macros,
  so the way you need to use this is (for constructors):

  #ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
  #pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(my_constructor)
  #endif
  G_DEFINE_CONSTRUCTOR(my_constructor)
  static void my_constructor(void) {
   ...
  }

*/

#ifndef __GTK_DOC_IGNORE__

#if  __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)

#define G_HAS_CONSTRUCTORS 1

#define G_DEFINE_CONSTRUCTOR(_func) static void __attribute__((constructor)) _func (void);
#define G_DEFINE_DESTRUCTOR(_func) static void __attribute__((destructor)) _func (void);

#elif defined (_MSC_VER) && (_MSC_VER >= 1500)
/* Visual studio 2008 and later has _Pragma */

#include <stdlib.h>

#define G_HAS_CONSTRUCTORS 1

/* We do some weird things to avoid the constructors being optimized
 * away on VS2015 if WholeProgramOptimization is enabled. First we
 * make a reference to the array from the wrapper to make sure its
 * references. Then we use a pragma to make sure the wrapper function
 * symbol is always included at the link stage. Also, the symbols
 * need to be extern (but not dllexport), even though they are not
 * really used from another object file.
 */

/* We need to account for differences between the mangling of symbols
 * for Win32 (x86) and x64 programs, as symbols on Win32 are prefixed
 * with an underscore but symbols on x64 are not.
 */
#ifdef _WIN64
#define G_MSVC_SYMBOL_PREFIX ""
#else
#define G_MSVC_SYMBOL_PREFIX "_"
#endif

#define G_DEFINE_CONSTRUCTOR(_func) G_MSVC_CTOR (_func, G_MSVC_SYMBOL_PREFIX)
#define G_DEFINE_DESTRUCTOR(_func) G_MSVC_DTOR (_func, G_MSVC_SYMBOL_PREFIX)

#define G_MSVC_CTOR(_func,_sym_prefix) \
  static void _func(void); \
  extern int (* _array ## _func)(void);              \
  int _func ## _wrapper(void) { _func(); g_slist_find (NULL,  _array ## _func); return 0; } \
  __pragma(comment(linker,"/include:" _sym_prefix # _func "_wrapper")) \
  __pragma(section(".CRT$XCU",read)) \
  __declspec(allocate(".CRT$XCU")) int (* _array ## _func)(void) = _func ## _wrapper;

#define G_MSVC_DTOR(_func,_sym_prefix) \
  static void _func(void); \
  extern int (* _array ## _func)(void);              \
  int _func ## _constructor(void) { atexit (_func); g_slist_find (NULL,  _array ## _func); return 0; } \
   __pragma(comment(linker,"/include:" _sym_prefix # _func "_constructor")) \
  __pragma(section(".CRT$XCU",read)) \
  __declspec(allocate(".CRT$XCU")) int (* _array ## _func)(void) = _func ## _constructor;

#elif defined (_MSC_VER)

#define G_HAS_CONSTRUCTORS 1

/* Pre Visual studio 2008 must use #pragma section */
#define G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA 1
#define G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA 1

#define G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(_func) \
  section(".CRT$XCU",read)
#define G_DEFINE_CONSTRUCTOR(_func) \
  static void _func(void); \
  static int _func ## _wrapper(void) { _func(); return 0; } \
  __declspec(allocate(".CRT$XCU")) static int (*p)(void) = _func ## _wrapper;

#define G_DEFINE_DESTRUCTOR_PRAGMA_ARGS(_func) \
  section(".CRT$XCU",read)
#define G_DEFINE_DESTRUCTOR(_func) \
  static void _func(void); \
  static int _func ## _constructor(void) { atexit (_func); return 0; } \
  __declspec(allocate(".CRT$XCU")) static int (* _array ## _func)(void) = _func ## _constructor;

#elif defined(__SUNPRO_C)

/* This is not tested, but i believe it should work, based on:
 * http://opensource.apple.com/source/OpenSSL098/OpenSSL098-35/src/fips/fips_premain.c
 */

#define G_HAS_CONSTRUCTORS 1

#define G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA 1
#define G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA 1

#define G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(_func) \
  init(_func)
#define G_DEFINE_CONSTRUCTOR(_func) \
  static void _func(void);

#define G_DEFINE_DESTRUCTOR_PRAGMA_ARGS(_func) \
  fini(_func)
#define G_DEFINE_DESTRUCTOR(_func) \
  static void _func(void);

#else

/* constructors not supported for this compiler */

#endif

#endif /* __GTK_DOC_IGNORE__ */

#ifdef G_HAS_CONSTRUCTORS

#ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
#pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(resource_constructor)
#endif
G_DEFINE_CONSTRUCTOR(resource_constructor)
#ifdef G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA
#pragma G_DEFINE_DESTRUCTOR_PRAGMA_ARGS(resource_destructor)
#endif
G_DEFINE_DESTRUCTOR(resource_destructor)

#else
#warning "Constructor not supported on this compiler, linking in resources will not work"
#endif

static void resource_constructor (void)
{
  g_static_resource_init (&static_resource);
}

static void resource_destructor (void)
{
  g_static_resource_fini (&static_resource);
}
